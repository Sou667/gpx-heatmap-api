openapi: 3.0.2
info:
  title: CycleDoc Heatmap-API
  description: |
    API zur Verarbeitung von GPX-Daten, Segmentierung von Routen, Risikoanalyse und Erstellung einer interaktiven Heatmap.
    Die API bietet Funktionen zur Berechnung von Streckenlänge, Risikobewertung basierend auf Wetter, Steigung, Kurven und weiteren Parametern,
    sowie zur Erstellung eines detaillierten Berichts gemäß den Systemanforderungen.
    Zusätzlich wird eine intelligente Sanitäterlogik implementiert, um kritische Segmente zu identifizieren.

    **Hinweise:**
    - Für eine genaue Wetterabfrage wird ein externer Wetterdienst (WeatherStack) verwendet. Stelle sicher, dass die Umgebungsvariable `WEATHERSTACK_API_KEY` gesetzt ist.
    - Logs werden in `app.log` geschrieben und können zur Fehlersuche (z. B. Anzahl der Segmente, Wetterabfrage) verwendet werden.
  version: 1.0.0

servers:
  - url: https://gpx-heatmap-api.onrender.com
    description: Produktionsserver

paths:
  /:
    get:
      summary: Health-Check-Endpunkt
      description: Einfacher Endpunkt zur Überprüfung, ob die API läuft.
      responses:
        '200':
          description: API ist bereit.
          content:
            text/plain:
              schema:
                type: string
                example: ✅ CycleDoc Heatmap-API bereit

  /heatmap-quick:
    post:
      summary: Erzeugt eine Heatmap und einen detaillierten Bericht
      description: |
        Verarbeitet eine Liste von Koordinaten und Parametern, um eine interaktive Heatmap zu erstellen.
        Die API segmentiert die Strecke, führt eine Risikoanalyse durch (basierend auf Wetter, Steigung, Kurven, Fahrerprofil etc.),
        und erstellt einen detaillierten Bericht. Wetterdaten werden für mehrere Punkte entlang der Strecke abgefragt (ca. alle 50 km),
        um regionale Unterschiede zu berücksichtigen. Logs in `app.log` enthalten Details zur Segmentierung und Risikoanalyse.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - coordinates
                - start_time
              properties:
                coordinates:
                  type: array
                  items:
                    type: array
                    items:
                      type: number
                    minItems: 2
                    maxItems: 3
                  description: Liste von Koordinaten im Format `[latitude, longitude, elevation?]`.
                  example: [[48.137154, 11.576124, 520], [48.138, 11.577, 521]]
                start_time:
                  type: string
                  format: date-time
                  description: Startzeit im ISO-8601-Format (z. B. "2025-04-09T07:00:00Z").
                  example: "2025-04-09T07:00:00Z"
                fahrer_typ:
                  type: string
                  description: Typ des Fahrers (z. B. "hobby", "profi").
                  example: "hobby"
                anzahl:
                  type: integer
                  description: Anzahl der Fahrer.
                  example: 5
                rennen_art:
                  type: string
                  description: Art des Rennens (z. B. "downhill", "road").
                  example: "road"
                geschlecht:
                  type: string
                  description: Geschlecht des Fahrers (z. B. "m", "w").
                  example: "w"
                alter:
                  type: integer
                  description: Alter des Fahrers.
                  example: 42
                material:
                  type: string
                  description: Material des Fahrrads (z. B. "carbon", "aluminium").
                  example: "aluminium"
                schutzausruestung:
                  type: object
                  properties:
                    helm:
                      type: boolean
                    protektoren:
                      type: boolean
                  description: Schutzausrüstung des Fahrers.
                  example: {"helm": true, "protektoren": false}
                overuse_knee:
                  type: boolean
                  description: Hat der Fahrer Knieprobleme durch Überlastung?
                  example: false
                rueckenschmerzen:
                  type: boolean
                  description: Hat der Fahrer Rückenschmerzen?
                  example: false
                massenstart:
                  type: boolean
                  description: Handelt es sich um einen Massenstart?
                  example: false
                wetter_override:
                  type: object
                  properties:
                    temperature:
                      type: number
                    wind_speed:
                      type: number
                    precip:
                      type: number
                    condition:
                      type: string
                  description: Optionale Wetterdaten zum Überschreiben der API-Abfrage.
                  example: {"temperature": 15, "wind_speed": 10, "precip": 0, "condition": "klar"}
      responses:
        '200':
          description: Erfolgreiche Verarbeitung mit Heatmap-URL, Streckenlänge, Segmentinformationen und Bericht.
          content:
            application/json:
              schema:
                type: object
                properties:
                  heatmap_url:
                    type: string
                    description: URL zur erstellten Heatmap.
                    example: "https://gpx-heatmap-api.onrender.com/static/heatmap_20250409120000.html"
                  distance_km:
                    type: number
                    description: Gesamtlänge der Strecke in Kilometern.
                    example: 10.5
                  segments:
                    type: array
                    items:
                      type: object
                      properties:
                        segment_index:
                          type: integer
                        center:
                          type: object
                          properties:
                            lat:
                              type: number
                            lon:
                              type: number
                        slope:
                          type: number
                        sharp_curve:
                          type: boolean
                        terrain:
                          type: string
                        weather:
                          type: object
                        nighttime:
                          type: boolean
                        street_surface:
                          type: string
                        risk:
                          type: integer
                        injuries:
                          type: array
                          items:
                            type: string
                        sani_needed:
                          type: boolean
                    description: Informationen zu den Segmenten der Strecke.
                  detailed_report:
                    type: string
                    description: Detaillierter Bericht mit Risikoeinschätzung, Wetterdaten, Verletzungen etc.
        '400':
          description: Ungültige Eingabedaten.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Keine gültigen Koordinaten empfangen"
        '500':
          description: Serverfehler bei der Verarbeitung.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Fehler bei der Kartenerstellung"

  /parse-gpx:
    post:
      summary: Parst eine GPX-Datei und extrahiert Koordinaten
      description: |
        Verarbeitet eine hochgeladene GPX-Datei und extrahiert alle Track- oder Routenpunkte.
        Die API unterstützt sowohl `multipart/form-data` (Datei-Upload) als auch `application/json` (Base64-codierte Datei).
        Häufige XML-Probleme (z. B. BOM, Encoding, fehlender Header) werden automatisch korrigiert.
        Es gibt ein Limit von 100.000 Trackpunkten pro Datei.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Die hochzuladende GPX-Datei.
              required:
                - file
          application/json:
            schema:
              type: object
              properties:
                file_base64:
                  type: string
                  description: Base64-codierte GPX-Datei.
                  example: "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4..."
              required:
                - file_base64
      responses:
        '200':
          description: Erfolgreiche Extraktion der Koordinaten und Berechnung der Streckenlänge.
          content:
            application/json:
              schema:
                type: object
                properties:
                  coordinates:
                    type: array
                    items:
                      type: array
                      items:
                        type: number
                      minItems: 2
                      maxItems: 3
                    description: Liste der extrahierten Koordinaten im Format `[latitude, longitude, elevation?]`.
                    example: [[48.137154, 11.576124, 520], [48.138, 11.577, 521]]
                  distance_km:
                    type: number
                    description: Gesamtlänge der Strecke in Kilometern.
                    example: 10.5
        '400':
          description: Ungültige GPX-Datei oder Eingabedaten.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    examples:
                      - "Ungültige XML-Struktur: not well-formed (invalid token): line 1, column 2"
                      - "GPX-Datei enthält keine Track- oder Routenpunkte"
                      - "Zu wenige Koordinaten für eine Distanzberechnung"
                      - "Zu viele Trackpunkte: 150000. Maximum erlaubt: 100000"
        '500':
          description: Serverfehler bei der Verarbeitung der GPX-Datei.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Fehler beim Verarbeiten der GPX-Daten: ..."

  /chunk-upload:
    post:
      summary: Teilt Koordinaten in Chunks auf und speichert sie
      description: |
        Teilt eine Liste von Koordinaten in kleinere JSON-Chunks auf und speichert diese als Dateien.
        Dies ist nützlich, um große Strecken in manageable Teile zu zerlegen.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - coordinates
              properties:
                coordinates:
                  type: array
                  items:
                    type: array
                    items:
                      type: number
                    minItems: 2
                    maxItems: 3
                  description: Liste von Koordinaten im Format `[latitude, longitude, elevation?]`.
                  example: [[48.137154, 11.576124, 520], [48.138, 11.577, 521]]
                chunk_size:
                  type: integer
                  description: Anzahl der Koordinaten pro Chunk (Standard: 200).
                  example: 200
      responses:
        '200':
          description: Chunks wurden erfolgreich erstellt und gespeichert.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Bestätigung der Operation.
                    example: "3 Chunks gespeichert"
                  chunks:
                    type: array
                    items:
                      type: string
                    description: Liste der Dateinamen der erstellten Chunks.
                    example: ["chunks/chunk_1.json", "chunks/chunk_2.json", "chunks/chunk_3.json"]
        '400':
          description: Ungültige Eingabedaten.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Keine gültigen Koordinaten empfangen"
        '500':
          description: Fehler beim Speichern der Chunks.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Fehler beim Speichern der Chunks"

  /openapi.yaml:
    get:
      summary: Liefert die OpenAPI-Spezifikation
      description: Stellt die OpenAPI-Spezifikation im YAML-Format bereit.
      responses:
        '200':
          description: OpenAPI-Spezifikation erfolgreich geliefert.
          content:
            text/yaml:
              schema:
                type: string
        '404':
          description: OpenAPI-Datei nicht gefunden.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "OpenAPI-Datei nicht gefunden"

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
      required:
        - error
